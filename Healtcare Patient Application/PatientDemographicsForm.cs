using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Healtcare_Patient_Application.DataOperations;
using Healthcare_Patient_Application.DataOperations;
using MySql.Data.MySqlClient;

namespace Healtcare_Patient_Application
{
    public partial class PatientDemographicsForm : Form
    {
        private int? _patientId = null;
        private bool _isViewMode = false; // Indicates if the form is in View mode
        private bool _isModifyMode = false; // Indicates if the form is in Modify mode
        private string patientName;
        private string patientAge;



        public PatientDemographicsForm(int? patientId = null, bool isViewMode = true, bool isModifyMode = false)
        {
            InitializeComponent();
            LogAccessForm.FormAccessLogger.LogFormAccess(LoginSession.GlobalSession.LoginID, "Patient Demographics Form");
            this._patientId = patientId;
            this._isViewMode = isViewMode;
            this._isModifyMode = isModifyMode;

            

            if (patientId == -1) // If no PatientID is passed
            {
                // Switch to Add Mode
                _isViewMode = false;
                _isModifyMode = false;
            }


            // Configure the form based on initial mode
            ConfigureFormMode();

            if (patientId != -1)
            {
                LoadPatientData(patientId.Value);
            }
            
        }
        private void ConfigureFormMode()
        {
            if (_isViewMode)
            {
                SetControlsReadOnly(true); // Disable editing
                btnAdd.Enabled = false;
                btnSave.Enabled = false;
                btnDelete.Enabled = true;
                BTNUnDo.Enabled = false;
                btnModify.Enabled = true; // Enable Modify button
                txtPatientID.ReadOnly = true;
            }
            else if (_isModifyMode)
            {
                SetControlsReadOnly(false); // Enable editing
                txtPatientID.ReadOnly = true; // Prevent changes to Patient ID
                btnAdd.Enabled = false; // Prevent adding new records in Modify mode
                btnSave.Enabled = true; // Enable save
                BTNUnDo.Enabled = true;
            }
            else
            {
                SetControlsReadOnly(true); // Disable Editing
                txtPatientID.ReadOnly = true; // Patient ID is generated by the database
                btnAdd.Enabled = true; // Allow adding a new record
                btnSave.Enabled = true; // Enable Save
                BTNUnDo.Enabled= true;
                btnModify.Enabled = false; // Disable Modify button
                btnDelete.Enabled = false; // Disable Delete button
            }
        }
        private void SetControlsReadOnly(bool isReadOnly)
        {
            foreach (Control control in this.Controls)
            {
                if (control is TextBox textBox)
                {
                    textBox.ReadOnly = isReadOnly;
                }
                else if (control is ComboBox comboBox)
                {
                    comboBox.Enabled = !isReadOnly;
                }
                else if (control is DateTimePicker dateTimePicker)
                {
                    dateTimePicker.Enabled = !isReadOnly;
                }
            }
        }
        private void LoadPatientData(int patientId)
        {
            try
            {
                // Define the SQL query to retrieve patient data based on the patientId
                string query = "SELECT * FROM patientdemographics WHERE patientId = @patientId";

                using (MySqlConnection connection = GMHDBOperations.MakeConnection())
                {
                    using (MySqlCommand cmd = new MySqlCommand(query, connection))
                    {
                        cmd.Parameters.AddWithValue("@patientId", patientId);

                        // Execute the query and get a data reader
                        using (MySqlDataReader reader = cmd.ExecuteReader())
                        {
                            if (reader.Read())
                            {
                                // Populate the form fields with the retrieved data
                                txtPatientID.Text = reader["patientId"].ToString();
                                txtFirstName.Text = reader["PtFirstName"].ToString();
                                txtMiddleName.Text = reader["PtMiddleInitial"].ToString();
                                txtLastName.Text = reader["PtLastName"].ToString(); 
                                cboGender.SelectedItem = reader["Gender"].ToString();
                                dtpDateOfBirth.Value = Convert.ToDateTime(reader["DOB"]);
                                txtSSN.Text = reader["SSN"].ToString();
                                txtPhoneNumber.Text = reader["PtHomePhone"].ToString();
                                txtEmailAddress.Text = reader["EmailAddress"].ToString();
                                txtAddress.Text = reader["HomeAddress"].ToString();
                                txtCity.Text = reader["HomeCity"].ToString();
                                cboState.SelectedItem = reader["HomeState/Province/Region"].ToString();
                                txtZipCode.Text = reader["HomeZip"].ToString();
                                txtPreviousLastName.Text = reader["PtPreviousLastName"].ToString() ;
                                txtSuffix.Text = reader["Suffix"].ToString();
                                txtCountry.Text = reader["Country"].ToString();
                                txtCitizenship.Text = reader["Citizenship"].ToString();
                                txtEthnicAssociation.Text = reader["EthnicAssociation"].ToString();
                                txtReligion.Text = reader["Religion"].ToString();
                                txtMaritalStatus.Text = reader["MaritalStatus"].ToString();
                                txtEmploymentStatus.Text = reader["EmploymentStatus"].ToString();
                                txtDateOfExpire.Text = reader["DateofExpire"].ToString();
                                txtReferral.Text = reader["Referral"].ToString();
                                txtNextOfKin.Text = reader["NextOfKinID"].ToString();
                                txtNextOfKinRelationshipToPatient.Text = reader["NextOfKinRelationshipToPatient"].ToString();
                                txtCurrentPrimaryHCPId.Text = reader["CurrentPrimaryHCPId"].ToString();
                                dtpDateEntered.Value = Convert.ToDateTime(reader["DateEntered"]);
                                txtComments.Text = reader["Comments"].ToString();
                                txtEmergencyContactPhone.Text = reader["EmergencyPhoneNumber"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("No patient data found");
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading patient data: {ex.Message}");
            }
        }
      
        private void btnModify_Click(object sender, EventArgs e)
        {
            // Enable Modify mode dynamically
            _isModifyMode = true;
            _isViewMode = false;

            // Reconfigure the form
            ConfigureFormMode();

            MessageBox.Show("You can now modify and add new fields.");
            LogAccessForm.LogUserAction(LoginSession.GlobalSession.LoginID, "Patient Demographics Form",
                "User clicked the Modify Button");
        }
        private void btnBack_Click(object sender, EventArgs e)
        {
            // Create an instance of the previous form (e.g., MainForm or PatientSelectionForm)
            PatientSelectionForm selectionForm = new PatientSelectionForm();

            // Show the previous form
            selectionForm.Show();

            // Close or hide the current form
            this.Close();
        }

        private void textBox4_TextChanged(object sender, EventArgs e)
        {

        }

        private void btnSave_Click(object sender, EventArgs e)
        {
            try
            {
                using (MySqlConnection connection = GMHDBOperations.MakeConnection())
                {
                    if (_isModifyMode) // Handle updates
                    {
                        string query = @"
                    UPDATE patientdemographics 
                    SET PtFirstName = @PtFirstName, PtMiddleInitial = @PtMiddleInitial, PtLastName = @PtLastName, 
                        Gender = @Gender, DOB = @DOB, SSN = @SSN, PtHomePhone = @PtHomePhone, 
                        EmailAddress = @EmailAddress, HomeAddress = @HomeAddress, HomeCity = @HomeCity, 
                        `HomeState/Province/Region` = @HomeState, HomeZip = @HomeZip, 
                        PtPreviousLastName = @PtPreviousLastName, Suffix = @Suffix, Country = @Country, 
                        Citizenship = @Citizenship, EthnicAssociation = @EthnicAssociation, Religion = @Religion, 
                        MaritalStatus = @MaritalStatus, EmploymentStatus = @EmploymentStatus, 
                        DateofExpire = @DateofExpire, Referral = @Referral, NextOfKinID = @NextOfKinID, 
                        NextOfKinRelationshipToPatient = @NextOfKinRelationship, CurrentPrimaryHCPId = @HCPId, 
                        DateEntered = @DateEntered, Comments = @Comments, EmergencyPhoneNumber = @EmergencyPhone 
                    WHERE patientId = @PatientID";

                        using (MySqlCommand cmd = new MySqlCommand(query, connection))
                        {
                            AddPatientParameters(cmd); // Method to add parameters from form fields
                            cmd.Parameters.AddWithValue("@PatientID", _patientId);

                            cmd.ExecuteNonQuery();
                            MessageBox.Show("Patient record updated successfully.");
                        }

                        LogAccessForm.LogUserAction(LoginSession.GlobalSession.LoginID, "Patient Demographics Form",
                "User modified a Patient Demographics record");
                    }
                    else // Handle new record insertions
                    {
                        string query = @"
                    INSERT INTO patientdemographics (
                        PtFirstName, PtMiddleInitial, PtLastName, Gender, DOB, SSN, PtHomePhone, 
                        EmailAddress, HomeAddress, HomeCity, `HomeState/Province/Region`, HomeZip, 
                        PtPreviousLastName, Suffix, Country, Citizenship, EthnicAssociation, Religion, 
                        MaritalStatus, EmploymentStatus, DateofExpire, Referral, NextOfKinID, 
                        NextOfKinRelationshipToPatient, CurrentPrimaryHCPId, DateEntered, Comments, 
                        EmergencyPhoneNumber
                    ) 
                    VALUES (
                        @PtFirstName, @PtMiddleInitial, @PtLastName, @Gender, @DOB, @SSN, @PtHomePhone, 
                        @EmailAddress, @HomeAddress, @HomeCity, @HomeState, @HomeZip, @PtPreviousLastName, 
                        @Suffix, @Country, @Citizenship, @EthnicAssociation, @Religion, @MaritalStatus, 
                        @EmploymentStatus, @DateofExpire, @Referral, @NextOfKinID, @NextOfKinRelationship, 
                        @HCPId, @DateEntered, @Comments, @EmergencyPhone)";

                        using (MySqlCommand cmd = new MySqlCommand(query, connection))
                        {
                            AddPatientParameters(cmd); // Method to add parameters from form fields
                            cmd.ExecuteNonQuery();
                            MessageBox.Show("New patient record added successfully.");
                        }

                        LogAccessForm.LogUserAction(LoginSession.GlobalSession.LoginID, "Patient Demographics Form",
                "User saved a new Patient Demographics record");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error saving patient data: {ex.Message}");
            }
        }
        private bool IsValidName(string name)
        {
            // Regular expression to match only uppercase and lowercase letters
            return System.Text.RegularExpressions.Regex.IsMatch(name, @"^[a-zA-Z]+$");
        }
        private void AddPatientParameters(MySqlCommand cmd)
        {
            // Validate First Name
            if (!IsValidName(txtFirstName.Text))
            {
                MessageBox.Show("First Name can only contain uppercase and lowercase letters.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            // Validate Middle Initial (can be empty, but if provided must be a single letter)
            if (!string.IsNullOrEmpty(txtMiddleName.Text) && !IsValidName(txtMiddleName.Text))
            {
                MessageBox.Show("Middle Initial can only contain a single uppercase or lowercase letter.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            // Validate Last Name
            if (!IsValidName(txtLastName.Text))
            {
                MessageBox.Show("Last Name can only contain uppercase and lowercase letters.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            cmd.Parameters.AddWithValue("@PtFirstName", txtFirstName.Text);
            cmd.Parameters.AddWithValue("@PtMiddleInitial", txtMiddleName.Text);
            cmd.Parameters.AddWithValue("@PtLastName", txtLastName.Text);
            cmd.Parameters.AddWithValue("@Gender", cboGender.SelectedItem?.ToString());
            cmd.Parameters.AddWithValue("@DOB", dtpDateOfBirth.Value);
            cmd.Parameters.AddWithValue("@SSN", txtSSN.Text);
            cmd.Parameters.AddWithValue("@PtHomePhone", txtPhoneNumber.Text);
            cmd.Parameters.AddWithValue("@EmailAddress", txtEmailAddress.Text);
            cmd.Parameters.AddWithValue("@HomeAddress", txtAddress.Text);
            cmd.Parameters.AddWithValue("@HomeCity", txtCity.Text);
            cmd.Parameters.AddWithValue("@HomeState", cboState.SelectedItem?.ToString());
            cmd.Parameters.AddWithValue("@HomeZip", txtZipCode.Text);
            cmd.Parameters.AddWithValue("@PtPreviousLastName", txtPreviousLastName.Text);
            cmd.Parameters.AddWithValue("@Suffix", txtSuffix.Text);
            cmd.Parameters.AddWithValue("@Country", txtCountry.Text);
            cmd.Parameters.AddWithValue("@Citizenship", txtCitizenship.Text);
            cmd.Parameters.AddWithValue("@EthnicAssociation", txtEthnicAssociation.Text);
            cmd.Parameters.AddWithValue("@Religion", txtReligion.Text);
            cmd.Parameters.AddWithValue("@MaritalStatus", txtMaritalStatus.Text);
            cmd.Parameters.AddWithValue("@EmploymentStatus", txtEmploymentStatus.Text);
            cmd.Parameters.AddWithValue("@DateofExpire", txtDateOfExpire.Text);
            cmd.Parameters.AddWithValue("@Referral", txtReferral.Text);
            cmd.Parameters.AddWithValue("@NextOfKinID", txtNextOfKin.Text);
            cmd.Parameters.AddWithValue("@NextOfKinRelationship", txtNextOfKinRelationshipToPatient.Text);
            cmd.Parameters.AddWithValue("@HCPId", txtCurrentPrimaryHCPId.Text);
            cmd.Parameters.AddWithValue("@DateEntered", dtpDateEntered.Value);
            cmd.Parameters.AddWithValue("@Comments", txtComments.Text);
            cmd.Parameters.AddWithValue("@EmergencyPhone", txtEmergencyContactPhone.Text);
        }

        private void btnAdd_Click(object sender, EventArgs e)
        {
            _isModifyMode = false; // Set mode to Add
            _isViewMode = false;
            _patientId = null; // Clear any existing patient ID

            ClearFields(); // Reset the form fields for new entry
            SetControlsReadOnly(false); // Enable editing
            txtPatientID.ReadOnly = true; // Prevent manual entry of Patient ID
            MessageBox.Show("Ready to add a new patient record.");
            LogAccessForm.LogUserAction(LoginSession.GlobalSession.LoginID, "Patient Demographics Form",
                "User clicked the Add Button");
        }

        // Helper method to clear form fields (optional)
        private void ClearFields()
        {
            txtFirstName.Clear();
            txtMiddleName.Clear();
            txtLastName.Clear();
            cboGender.SelectedIndex = -1;
            dtpDateOfBirth.Value = DateTime.Now;
            txtSSN.Clear();
            txtPhoneNumber.Clear();
            txtEmailAddress.Clear();
            txtAddress.Clear();
            txtCity.Clear();
            cboState.SelectedIndex = -1;
            txtZipCode.Clear();
            txtEmergencyContactPhone.Clear();
            txtPreviousLastName.Clear();
            txtHospitalMR.Clear();
            txtSuffix.Clear();
            txtCountry.Clear();
            txtCitizenship.Clear();
            txtEthnicAssociation.Clear();
            txtMaritalStatus.Clear();
            txtEmploymentStatus.Clear();
            txtReferral.Clear();
            txtCurrentPrimaryHCPId.Clear();
            txtComments.Clear();
            txtNextOfKin.Clear();
            txtNextOfKinRelationshipToPatient.Clear();
            dtpDateEntered.Value = DateTime.Now;

             // Clear PatientID for new records
        }

        private void btnDelete_Click(object sender, EventArgs e)
        {
            try
            {
                // Ensure that the PatientID is provided
                int patientId;
                if (int.TryParse(txtPatientID.Text, out patientId))
                {
                    // Confirm the deletion with the user
                    DialogResult dialogResult = MessageBox.Show(
                        "Are you sure you want to delete this patient record?",
                        "Delete Record",
                        MessageBoxButtons.YesNo,
                        MessageBoxIcon.Warning);

                    if (dialogResult == DialogResult.Yes)
                    {
                        // Set up the DELETE SQL query
                        string query = "UPDATE patientdemographics SET deleted = 1 WHERE patientId = @patientId";

                        // Execute the query
                        using (MySqlConnection conn = GMHDBOperations.MakeConnection())
                        {
                            
                            using (MySqlCommand cmd = new MySqlCommand(query, conn))
                            {
                                // Add the PatientID as a parameter to the SQL command
                                cmd.Parameters.AddWithValue("@patientId", patientId);

                                // Execute the DELETE query
                                int rowsAffected = cmd.ExecuteNonQuery();

                                // Check if any rows were affected (i.e., if the record was found and deleted)
                                if (rowsAffected > 0)
                                {
                                    MessageBox.Show("Patient record marked as deleted successfully.");
                                }
                                else
                                {
                                    MessageBox.Show("No record found for the provided PatientID.");
                                }
                            }
                        }


                    }
                }
                else
                {
                    MessageBox.Show("Please provide a valid PatientID to delete.");
                }

                LogAccessForm.LogUserAction(LoginSession.GlobalSession.LoginID, "Patient Demographics Form",
                "User deleted a Patient Demographics Record");
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error: {ex.Message}");
            }
        }

        private void PatientDemographicsForm_Load(object sender, EventArgs e)
        {
            StoreOriginalValues();
        }

        private void textBox2_TextChanged(object sender, EventArgs e)
        {

        }

        private void label7_Click(object sender, EventArgs e)
        {

        }

        private void label9_Click(object sender, EventArgs e)
        {

        }

        private void label10_Click(object sender, EventArgs e)
        {

        }

        private void btnAllergyRecords_Click(object sender, EventArgs e)
        {
            // Validate that the necessary fields are filled
            if (dtpDateOfBirth.Value == null || string.IsNullOrWhiteSpace(txtFirstName.Text) || 
                string.IsNullOrWhiteSpace(txtLastName.Text) || !_patientId.HasValue)
            {
                MessageBox.Show("Select a Patient from the Patient Selection Form. Press the Back button to go back to the Patient Selection Form");
                return;
            }
            DateTime dateOfBirth = dtpDateOfBirth.Value;

            // Calculate age in years
            int age = DateTime.Now.Year - dateOfBirth.Year;

            // Adjust if the birthday hasn't occurred yet this year
            if (DateTime.Now < dateOfBirth.AddYears(age))
            {
                age--;
            }
            patientAge = age.ToString();

            patientName = $"{txtFirstName.Text} {txtMiddleName.Text} {txtLastName.Text}";
            AllergyHistoryForm allergyform = new AllergyHistoryForm(_patientId.Value, patientName, patientAge);
            allergyform.Show();
            this.Hide();
        }

        private void btnGeneralMedical_Click(object sender, EventArgs e)
        {
            // Validate that the necessary fields are filled
            if (dtpDateOfBirth.Value == null || string.IsNullOrWhiteSpace(txtFirstName.Text) ||
                string.IsNullOrWhiteSpace(txtLastName.Text) || !_patientId.HasValue)
            {
                MessageBox.Show("Select a Patient from the Patient Selection Form. Press the Back button to go back to the Patient Selection Form");
                return;
            }
            DateTime dateOfBirth = dtpDateOfBirth.Value;

            // Calculate age in years
            int age = DateTime.Now.Year - dateOfBirth.Year;

            // Adjust if the birthday hasn't occurred yet this year
            if (DateTime.Now < dateOfBirth.AddYears(age))
            {
                age--;
            }
            patientAge = age.ToString();

            patientName = $"{txtFirstName.Text} {txtMiddleName.Text} {txtLastName.Text}";
            GMH form = new GMH();
            form.PatientID = Convert.ToString(_patientId.Value);
            form.PatientName = patientName;
            form.PatientAge = patientAge;
            form.Show();
            this.Hide();
        }

        private void btnFamilyHistory_Click(object sender, EventArgs e)
        {
            // Validate that the necessary fields are filled
            if (dtpDateOfBirth.Value == null || string.IsNullOrWhiteSpace(txtFirstName.Text) ||
                string.IsNullOrWhiteSpace(txtLastName.Text) || !_patientId.HasValue)
            {
                MessageBox.Show("Select a Patient from the Patient Selection Form. Press the Back button to go back to the Patient Selection Form");
                return;
            }


            DateTime dateOfBirth = dtpDateOfBirth.Value;

            // Calculate age in years
            int age = DateTime.Now.Year - dateOfBirth.Year;

            // Adjust if the birthday hasn't occurred yet this year
            if (DateTime.Now < dateOfBirth.AddYears(age))
            {
                age--;
            }
            patientAge = age.ToString();

            patientName = $"{txtFirstName.Text} {txtMiddleName.Text} {txtLastName.Text}";
            Family_History_Form form = new Family_History_Form();
            form.PatientIDFB = Convert.ToString(_patientId.Value);
            form.PatientNameFB = patientName;
            form.PatientAgeFB = patientAge;
            form.Show();
            this.Hide();
        }

        

        private void BTNUnDo_Click(object sender, EventArgs e)
        {
            UndoChanges();

        }

        

        private List<string> originalValues = new List<string>();

        private void StoreOriginalValues()
        {
            originalValues.Clear(); // Clear the list before storing new values

            // Store text field values
            originalValues.Add(txtFirstName.Text);                       // Index 0
            originalValues.Add(txtMiddleName.Text);                      // Index 1
            originalValues.Add(txtLastName.Text);                        // Index 2
            originalValues.Add(cboGender.SelectedIndex.ToString());      // Index 3
            originalValues.Add(dtpDateOfBirth.Value.ToString());         // Index 4
            originalValues.Add(txtSSN.Text);                             // Index 5
            originalValues.Add(txtPhoneNumber.Text);                     // Index 6
            originalValues.Add(txtEmailAddress.Text);                    // Index 7
            originalValues.Add(txtAddress.Text);                         // Index 8
            originalValues.Add(txtCity.Text);                            // Index 9
            originalValues.Add(cboState.SelectedIndex.ToString());       // Index 10
            originalValues.Add(txtZipCode.Text);                         // Index 11
            originalValues.Add(txtEmergencyContactPhone.Text);           // Index 12
            originalValues.Add(txtPreviousLastName.Text);                // Index 13
            originalValues.Add(txtHospitalMR.Text);                      // Index 14
            originalValues.Add(txtSuffix.Text);                          // Index 15
            originalValues.Add(txtCountry.Text);                         // Index 16
            originalValues.Add(txtCitizenship.Text);                     // Index 17
            originalValues.Add(txtEthnicAssociation.Text);               // Index 18
            originalValues.Add(txtMaritalStatus.Text);                   // Index 19
            originalValues.Add(txtEmploymentStatus.Text);                // Index 20
            originalValues.Add(txtReferral.Text);                        // Index 21
            originalValues.Add(txtCurrentPrimaryHCPId.Text);             // Index 22
            originalValues.Add(txtComments.Text);                        // Index 23
            originalValues.Add(txtNextOfKin.Text);                       // Index 24
            originalValues.Add(txtNextOfKinRelationshipToPatient.Text);  // Index 25
            originalValues.Add(dtpDateEntered.Value.ToString());         // Index 26
            originalValues.Add(txtDateOfExpire.Text);                    // Index 27
        }

        private void UndoChanges()
        {
            if (originalValues.Count == 28) // Check if all original values are stored
            {
                txtFirstName.Text = originalValues[0];
                txtMiddleName.Text = originalValues[1];
                txtLastName.Text = originalValues[2];
                cboGender.SelectedIndex = int.Parse(originalValues[3]);
                dtpDateOfBirth.Value = DateTime.Parse(originalValues[4]);
                txtSSN.Text = originalValues[5];
                txtPhoneNumber.Text = originalValues[6];
                txtEmailAddress.Text = originalValues[7];
                txtAddress.Text = originalValues[8];
                txtCity.Text = originalValues[9];
                cboState.SelectedIndex = int.Parse(originalValues[10]);
                txtZipCode.Text = originalValues[11];
                txtEmergencyContactPhone.Text = originalValues[12];
                txtPreviousLastName.Text = originalValues[13];
                txtHospitalMR.Text = originalValues[14];
                txtSuffix.Text = originalValues[15];
                txtCountry.Text = originalValues[16];
                txtCitizenship.Text = originalValues[17];
                txtEthnicAssociation.Text = originalValues[18];
                txtMaritalStatus.Text = originalValues[19];
                txtEmploymentStatus.Text = originalValues[20];
                txtReferral.Text = originalValues[21];
                txtCurrentPrimaryHCPId.Text = originalValues[22];
                txtComments.Text = originalValues[23];
                txtNextOfKin.Text = originalValues[24];
                txtNextOfKinRelationshipToPatient.Text = originalValues[25];
                dtpDateEntered.Value = DateTime.Parse(originalValues[26]);
                txtDateOfExpire.Text = originalValues[27];
            }
            else
            {
                MessageBox.Show("No changes to undo.");
            }
        }


    }
}
